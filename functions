# Make directory and enter it
function mkd () {
  mkdir -p "$@" && cd "$_";
}

# Copy website and its contents
function copy_website () {
  wget -e robots=off -p -k "$1"
}

# Extract most know archives with one command
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

clone() {
  local REPOS_DIR="$HOME/repos"
  local REPO_URL="$1"

  if [[ -z "$REPO_URL" ]]; then
    echo "Usage: clone <repository-url>"
    return 1
  fi

  cd "$REPOS_DIR" || return 1

  git clone "$REPO_URL" || return 1

  local DIR_NAME=$(basename "$REPO_URL" .git)
  cd "$DIR_NAME" || return 1
}

# Get gzip information (gzipped file size + reduction size).
gz() {

    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1" )
            printf "\n original size:   %12s\n" "$(hrfs "$originalSize")"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs "$gzippedSize")"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $((originalSize - gzippedSize)) )" \
                        "$( printf "%s" "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e "s/0*$//;s/\.$//" )"
                            #              └─ remove tailing zeros

        else
            printf "\"%s\" is empty.\n" "$1"
        fi
    else
        printf "\"%s\" is not a file.\n" "$1"
    fi

}

compress() {
  echo "Compressing '$1' ..."
  tar -cpJf "$1".tar.xz "$1"
  echo "Done"
}

### Convert video from MOV to MP4
### Explanation:
###
###  -c:v libx264: Uses the libx264 encoder for video, known for good quality and compression.
###  -preset medium: Sets the encoding speed/quality balance. "medium" is a good starting point.
###  -crf 23: Constant Rate Factor. Lower values generally mean higher quality but larger file sizes. 23 is a decent balance.
###  -c:a aac: Uses the AAC encoder for audio.
###  -b:a 128k: Sets the audio bitrate to 128kbps.
mov_to_mp4() {
  echo "Converting video $1 to $2"
  ffmpeg -i "$1"  -c:v libx264 -preset medium -crf 23 -c:a aac -b:a 128k "$2"
}
